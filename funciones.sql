--FUNCIONES MENU
CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENERMENU (IN IDROL INT) RETURNS SETOF "SYSTEM".MENU AS $$
begin
RETURN QUERY
SELECT
	M.*
FROM
	"SYSTEM".MENU M
	INNER JOIN "SYSTEM".ROL_MENU RM ON RM.ID_MENU = M.ID_MENU
WHERE
	RM.ID_ROL = IDROL
ORDER BY
	M.ID_MENUPADRE,
	M.ORDEN ASC;

ENd;
$$ LANGUAGE 'plpgsql';

CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENEROPCIONES (IN IDROL INT) RETURNS SETOF "SYSTEM".OPCION AS $$
begin
RETURN QUERY
SELECT
	O.*
FROM
	"SYSTEM".OPCION O
	INNER JOIN "SYSTEM".ROL_OPCION RO ON RO.ID_OPCION = O.ID_OPCION
WHERE
	RO.ID_ROL = IDROL
ORDER BY
	ORDEN ASC;
end;
$$ LANGUAGE 'plpgsql';

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_INTENTOS (
	INTENTOS INTEGER,
	BLOQUEADO INTEGER,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	CANTIDAD_INTENTO = INTENTOS,
	U_BLOQUEADO = BLOQUEADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSUARIO
RETURNING
	ID_USUARIO;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIAR_CLAVE (
	RESETCLAVE INT,
	CLAVE "SYSTEM".USUARIOS.U_CLAVE % TYPE,
	FECHAVENC "SYSTEM".USUARIOS.FECHA_VENCIMIENTO % TYPE,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
IF RESETCLAVE = 1 THEN RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	U_CLAVE = CLAVE,
	CANTIDAD_INTENTO = 0,
	RESET_CLAVE = 1,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSUARIO RETURNING
	ID_USUARIO;

else
RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	U_CLAVE = CLAVE,
	CANTIDAD_INTENTO = 0,
	RESET_CLAVE = 0,
	FECHA_VENCIMIENTO = FECHAVENC,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSUARIO
RETURNING
	ID_USUARIO;

END IF;
end;
$$ LANGUAGE PLPGSQL;

--FUNCIONES TABLA CATALOGO
CREATE OR REPLACE VIEW "SYSTEM".OBTENER_CATALOGO AS
SELECT
	M.*,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".CATALOGO M
	INNER JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = M.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = M.USUARIO_MODIFICA
ORDER BY
	M.ID_CATALOGO ASC;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_CATALOGO (
	NOMBRE VARCHAR(255),
	CODIGO VARCHAR(255),
	DESCRIPCION VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".CATALOGO (
		NOMBRE,
		CODIGO,
		DESCRIPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		NOMBRE,
		CODIGO,
		DESCRIPCION,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ID_CATALOGO;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_CATALOGO (
	IDCAT INTEGER,
	NOMB VARCHAR(255),
	DESCRI VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".CATALOGO
SET
	NOMBRE = NOMB,
	DESCRIPCION = DESCRI,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGO = IDCAT
RETURNING
	ID_CATALOGO;

END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_CATALOGO (IDCAT INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".CATALOGO
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGO = IDCAT
RETURNING
	ID_CATALOGO;
end;
$$ LANGUAGE PLPGSQL;

--FUNCIONES CATALOGO VALOR
CREATE OR REPLACE VIEW "SYSTEM".OBTENER_VALCATALOGO AS
SELECT
	M.ID_CATALOGOVALOR,
	M.ID_CATALOGO,
	C.NOMBRE AS NOMBRECAT,
	M.NOMBRE,
	M.DESCRIPCION,
	M.U_ESTADO,
	M.FECHA_CREACION,
	M.FECHA_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".CATALOGOVALOR M
	INNER JOIN "SYSTEM".CATALOGO C ON C.ID_CATALOGO = M.ID_CATALOGO
	INNER JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = M.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = M.USUARIO_MODIFICA
ORDER BY
	M.ID_CATALOGOVALOR;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_VALORCAT (
	IDCAT INTEGER,
	NOMBRE VARCHAR(255),
	DESCRIPCION VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".CATALOGOVALOR (
		ID_CATALOGO,
		NOMBRE,
		DESCRIPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		IDCAT,
		NOMBRE,
		DESCRIPCION,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ID_CATALOGOVALOR;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_VALORCAT (
	IDVALOR INTEGER,
	IDCAT INTEGER,
	NOMB VARCHAR(255),
	DESCRI VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".CATALOGOVALOR
SET
	ID_CATALOGO = IDCAT,
	NOMBRE = NOMB,
	DESCRIPCION = DESCRI,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGOVALOR = IDVALOR
RETURNING
	ID_CATALOGOVALOR;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_VALCATALOGO (IDCAT INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".CATALOGOVALOR
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGOVALOR = IDCAT
RETURNING
	ID_CATALOGOVALOR;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENER_VALOR_PORCATALOGO (CODIGOCAT VARCHAR(50)) RETURNS TABLE (
	ID_CATALOGOVALOR INTEGER,
	CODCAT VARCHAR(255),
	NOMBRE VARCHAR(255),
	ESTADO SMALLINT
) AS $$
begin

IF CODIGOCAT = 'actividad' THEN RETURN QUERY
SELECT
	C.ID_CATALOGO,
	C.CODIGO,
	C.NOMBRE,
	C.U_ESTADO
FROM
	"SYSTEM".CATALOGO C
WHERE
	C.CODIGO IN ('comer', 'indus', 'servi', 'ISFL')
ORDER BY
	C.ID_CATALOGO desc;

ELSE
RETURN QUERY
SELECT
	M.ID_CATALOGOVALOR,
	C.CODIGO,
	M.NOMBRE,
	M.U_ESTADO
FROM
	"SYSTEM".CATALOGOVALOR M
	INNER JOIN "SYSTEM".CATALOGO C ON C.ID_CATALOGO = M.ID_CATALOGO
WHERE
	C.CODIGO = CODIGOCAT
ORDER BY
	M.ID_CATALOGOVALOR desc;
end if;
end;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE VIEW "SYSTEM".OBTENER_ROLES AS
 SELECT m.id_rol,
    m.rol, 
    m.descripcion,
    m.u_estado,
    m.fecha_creacion,
    m.usuario_creacion,
    m.fecha_modifica,
    m.usuario_modifica,
    u.usuario,
    um.usuario AS usuariom
   FROM "SYSTEM".roles m
     JOIN "SYSTEM".usuarios u ON u.id_usuario = m.usuario_creacion
     LEFT JOIN "SYSTEM".usuarios um ON um.id_usuario = m.usuario_modifica
  ORDER BY m.id_rol asc;
  
 CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_ROL (
	ROL VARCHAR(255), 
	DESCRIPCION VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".ROLES (
		ROL,
		DESCRIPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		ROL,
		DESCRIPCION,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING	
	ID_ROL;
end;
$$ LANGUAGE PLPGSQL; 
  
  CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_ROL (
	IDROL INTEGER,
	NOMBROL VARCHAR(255),
	DESCRI VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".ROLES
SET
	ROL = NOMBROL,
	DESCRIPCION = DESCRI,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_ROL = IDROL
RETURNING
	ID_ROL;

END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_ROL (IDROL INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".ROLES
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_ROL = IDROL
RETURNING
	ID_ROL;
end;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE VIEW "SYSTEM".OBTENER_USUARIOS AS
SELECT
	U.ID_USUARIO,
	U.U_NOMBRE_COMPLETO,
	U.U_APELLIDO_COMPLETO,
	U.U_EMAIL,
	U.USUARIO,
	U.U_CLAVE,
	U.ID_ROL,
	U.U_ESTADO,
	U.RESET_CLAVE,
	U.U_BLOQUEADO,
	U.FECHA_VENCIMIENTO,
	U.CANTIDAD_INTENTO,
	U.FECHA_CREACION,
	U.USUARIO_CREACION,
	U.FECHA_MODIFICA,
	U.USUARIO_MODIFICA,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".USUARIOS U
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = U.USUARIO_MODIFICA
ORDER BY
	U.ID_USUARIO ASC;
	
	
	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_MENU AS
SELECT
	m.ID_MENU,
	m.ID_MENUPADRE,
	m.NOMBRE,
	m.ICONO,
	m.ORDEN,
	m.U_ESTADO,
	m.FECHA_CREACION,
	m.USUARIO_CREACION,
	m.FECHA_MODIFICA,
	m.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".MENU M
     JOIN "SYSTEM".usuarios u ON u.id_usuario = m.usuario_creacion
     LEFT JOIN "SYSTEM".usuarios um ON um.id_usuario = m.usuario_modifica
  ORDER BY m.id_menu asc;
  
  
   CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_MENU (
	NOMBRE VARCHAR(255), 
	ICONO VARCHAR(255),
	ORDEN INT,
	ID_MENUPADRE INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".MENU (
		ID_MENUPADRE,
		NOMBRE,
		ICONO,
		ORDEN,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		ID_MENUPADRE,
		NOMBRE,
		ICONO,
		ORDEN,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING	
	ID_MENU;
end;
$$ LANGUAGE PLPGSQL; 

  CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_MENU (
	IDMENU INT,
	NOMBREMENU VARCHAR(255), 
	ICONOMENU VARCHAR(255),
	ORDENMENU INT,
	MENUPADRE INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".MENU
SET
	NOMBRE = NOMBREMENU,
	ID_MENUPADRE=MENUPADRE,
	ICONO=ICONOMENU,
	ORDEN=ORDENMENU,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_MENU = IDMENU
RETURNING
	ID_MENU;

END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_MENU (IDMENU INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".MENU
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_MENU = IDMENU
RETURNING
	ID_MENU;
end;
$$ LANGUAGE PLPGSQL;


	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_ROLMENU AS
SELECT
	m.ROL_MENU_ID,
	m.ID_ROL,
	m.ID_MENU,
	m.U_ESTADO,
	m.FECHA_CREACION,
	m.USUARIO_CREACION,
	m.FECHA_MODIFICA,
	m.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".ROL_MENU M
     JOIN "SYSTEM".usuarios u ON u.id_usuario = m.usuario_creacion
     LEFT JOIN "SYSTEM".usuarios um ON um.id_usuario = m.usuario_modifica
  ORDER BY m.ROL_MENU_ID asc;
  
  
  
  
  
  
	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_OPCIONMENU AS
SELECT
	M.ID_OPCION,
	M.ID_MENU,
	M.NOMBRE,
	M.DESCRIPCION,
	M.ICONO,
	M.ORDEN,
	M.NOMBREVISTA,
	M.U_ESTADO,
	M.FECHA_CREACION,
	M.USUARIO_CREACION,
	M.FECHA_MODIFICA,
	men.nombre as menu,
	M.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".OPCION M
	JOIN "SYSTEM".MENU MEN ON MEN.ID_MENU = M.ID_MENU
	JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = M.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = M.USUARIO_MODIFICA
	  ORDER BY m.id_opcion asc;
	  
CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_OPCION (IDOPCION INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".OPCION
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_OPCION = IDOPCION
RETURNING
	ID_OPCION;
end;
$$ LANGUAGE PLPGSQL;

   CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_OPCION (
	NOMBRE VARCHAR(255), 
	NOMBREVISTA VARCHAR(255), 
	DESCRIPCION VARCHAR(255),
	IDMENU INT,
	ICONO VARCHAR(255),
	ORDEN INT,	
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
"SYSTEM".OPCION (
		ID_MENU,
		NOMBRE,
		DESCRIPCION,
		ICONO,
		ORDEN,
		NOMBREVISTA,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(		
		IDMENU,
		NOMBRE,
		DESCRIPCION,
		ICONO,
		ORDEN,
		NOMBREVISTA,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING	
	ID_OPCION;
end;
$$ LANGUAGE PLPGSQL; 

  CREATE
OR REPLACE FUNCTION "SYSTEM".actualizar_opcion (
	IDOPCION INT,
	NOMBREOPCION VARCHAR(255), 
	NOMBREVISTAOPCION VARCHAR(255), 
	DESCRIPCIONOPCION VARCHAR(255),
	IDMENU INT,
	ICONOOP VARCHAR(255),
	ORDENOP INT,	
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".OPCION
SET	
	ID_MENU = IDMENU,
	NOMBRE = NOMBREOPCION,
	DESCRIPCION = DESCRIPCIONOPCION,
	ICONO = ICONOOP,
	ORDEN = ORDENOP,
	NOMBREVISTA = NOMBREVISTAOPCION,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_OPCION = IDOPCION
RETURNING
	ID_OPCION;

END;
$$ LANGUAGE PLPGSQL;


CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENERMENU (IN IDROL INT) RETURNS SETOF "SYSTEM".MENU AS $$
begin
RETURN QUERY
SELECT
	M.*
FROM
	"SYSTEM".MENU M
	INNER JOIN "SYSTEM".ROL_MENU RM ON RM.ID_MENU = M.ID_MENU
WHERE
	RM.ID_ROL = IDROL and m.u_estado=1
ORDER BY
	M.ID_MENUPADRE,
	M.ORDEN ASC;

ENd;
$$ LANGUAGE 'plpgsql';

CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENEROPCIONES (IN IDROL INT) RETURNS SETOF "SYSTEM".OPCION AS $$
begin
RETURN QUERY
SELECT
	O.*
FROM
	"SYSTEM".OPCION O
	INNER JOIN "SYSTEM".ROL_OPCION RO ON RO.ID_OPCION = O.ID_OPCION
WHERE
	RO.ID_ROL = IDROL and o.u_estado=1
ORDER BY
	ORDEN ASC;
end;
$$ LANGUAGE 'plpgsql';


	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_ROLOPCION AS
SELECT
	RO.ROLOPCION_ID,
	RO.ID_ROL,
	RO.ID_OPCION,
	R.ROL,
	O.NOMBRE as opcion,
	RO.U_ESTADO,
	RO.FECHA_CREACION,
	RO.USUARIO_CREACION,
	RO.FECHA_MODIFICA,
	RO.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
	FROM
	"SYSTEM".ROL_OPCION RO
	JOIN "SYSTEM".ROLES R ON R.ID_ROL = RO.ID_ROL
	JOIN "SYSTEM".OPCION O ON O.ID_OPCION = RO.ID_OPCION
	JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = RO.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = RO.USUARIO_MODIFICA
ORDER BY
	RO.ROLOPCION_ID ASC;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_ROLOPCION (
	IDOPCION INT,
	IDROL INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".ROL_OPCION (
		ID_ROL,
		ID_OPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		IDROL,
		IDOPCION, 
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ROLOPCION_ID;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_ROLOPCION (IDROLOPCION INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".rol_opcion
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ROLOPCION_ID = IDROLOPCION
RETURNING
	IDROLOPCION;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ELIMINAR_ROLOPCION (IDROLOPCION INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
DELETE FROM "SYSTEM".rol_opcion
WHERE
	ROLOPCION_ID = IDROLOPCION
RETURNING
	IDROLOPCION;
end;
$$ LANGUAGE PLPGSQL;
  
CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_ROLMENU (
	IDMENU INT,
	IDROL INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".ROL_MENU (
		ID_ROL,
		ID_MENU,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		IDROL,
		IDMENU, 
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ROL_MENU_ID;
end;
$$ LANGUAGE PLPGSQL;
  
  
  
 