--FUNCIONES MENU
CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENERMENU (IN IDROL INT) RETURNS SETOF "SYSTEM".MENU AS $$
begin
RETURN QUERY
SELECT
	M.*
FROM
	"SYSTEM".MENU M
	INNER JOIN "SYSTEM".ROL_MENU RM ON RM.ID_MENU = M.ID_MENU
WHERE
	RM.ID_ROL = IDROL
ORDER BY
	M.ID_MENUPADRE,
	M.ORDEN ASC;

ENd;
$$ LANGUAGE 'plpgsql';

CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENEROPCIONES (IN IDROL INT) RETURNS SETOF "SYSTEM".OPCION AS $$
begin
RETURN QUERY
SELECT
	O.*
FROM
	"SYSTEM".OPCION O
	INNER JOIN "SYSTEM".ROL_OPCION RO ON RO.ID_OPCION = O.ID_OPCION
WHERE
	RO.ID_ROL = IDROL
ORDER BY
	ORDEN ASC;
end;
$$ LANGUAGE 'plpgsql';

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_INTENTOS (
	INTENTOS INTEGER,
	BLOQUEADO INTEGER,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	CANTIDAD_INTENTO = INTENTOS,
	U_BLOQUEADO = BLOQUEADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSUARIO
RETURNING
	ID_USUARIO;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIAR_CLAVE (
	RESETCLAVE INT,
	CLAVE "SYSTEM".USUARIOS.U_CLAVE % TYPE,
	FECHAVENC "SYSTEM".USUARIOS.FECHA_VENCIMIENTO % TYPE,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
IF RESETCLAVE = 1 THEN RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	U_CLAVE = CLAVE,
	CANTIDAD_INTENTO = 0,
	RESET_CLAVE = 1,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSUARIO RETURNING
	ID_USUARIO;

else
RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	U_CLAVE = CLAVE,
	CANTIDAD_INTENTO = 0,
	RESET_CLAVE = 0,
	FECHA_VENCIMIENTO = FECHAVENC,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSUARIO
RETURNING
	ID_USUARIO;

END IF;
end;
$$ LANGUAGE PLPGSQL;

--FUNCIONES TABLA CATALOGO
CREATE OR REPLACE VIEW "SYSTEM".OBTENER_CATALOGO AS
SELECT
	M.*,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".CATALOGO M
	INNER JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = M.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = M.USUARIO_MODIFICA
ORDER BY
	M.ID_CATALOGO ASC;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_CATALOGO (
	NOMBRE VARCHAR(255),
	CODIGO VARCHAR(255),
	DESCRIPCION VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".CATALOGO (
		NOMBRE,
		CODIGO,
		DESCRIPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		NOMBRE,
		CODIGO,
		DESCRIPCION,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ID_CATALOGO;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_CATALOGO (
	IDCAT INTEGER,
	NOMB VARCHAR(255),
	DESCRI VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".CATALOGO
SET
	NOMBRE = NOMB,
	DESCRIPCION = DESCRI,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGO = IDCAT
RETURNING
	ID_CATALOGO;

END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_CATALOGO (IDCAT INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".CATALOGO
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGO = IDCAT
RETURNING
	ID_CATALOGO;
end;
$$ LANGUAGE PLPGSQL;

--FUNCIONES CATALOGO VALOR
CREATE OR REPLACE VIEW "SYSTEM".OBTENER_VALCATALOGO AS
SELECT
	M.ID_CATALOGOVALOR,
	M.ID_CATALOGO,
	C.NOMBRE AS NOMBRECAT,
	M.NOMBRE,
	M.DESCRIPCION,
	M.U_ESTADO,
	M.FECHA_CREACION,
	M.FECHA_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".CATALOGOVALOR M
	INNER JOIN "SYSTEM".CATALOGO C ON C.ID_CATALOGO = M.ID_CATALOGO
	INNER JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = M.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = M.USUARIO_MODIFICA
ORDER BY
	M.ID_CATALOGOVALOR;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_VALORCAT (
	IDCAT INTEGER,
	NOMBRE VARCHAR(255),
	DESCRIPCION VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".CATALOGOVALOR (
		ID_CATALOGO,
		NOMBRE,
		DESCRIPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		IDCAT,
		NOMBRE,
		DESCRIPCION,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ID_CATALOGOVALOR;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_VALORCAT (
	IDVALOR INTEGER,
	IDCAT INTEGER,
	NOMB VARCHAR(255),
	DESCRI VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".CATALOGOVALOR
SET
	ID_CATALOGO = IDCAT,
	NOMBRE = NOMB,
	DESCRIPCION = DESCRI,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGOVALOR = IDVALOR
RETURNING
	ID_CATALOGOVALOR;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_VALCATALOGO (IDCAT INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".CATALOGOVALOR
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_CATALOGOVALOR = IDCAT
RETURNING
	ID_CATALOGOVALOR;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENER_VALOR_PORCATALOGO (CODIGOCAT VARCHAR(50)) RETURNS TABLE (
	ID_CATALOGOVALOR INTEGER,
	CODCAT VARCHAR(255),
	NOMBRE VARCHAR(255),
	ESTADO SMALLINT
) AS $$
begin

IF CODIGOCAT = 'actividad' THEN RETURN QUERY
SELECT
	C.ID_CATALOGO,
	C.CODIGO,
	C.NOMBRE,
	C.U_ESTADO
FROM
	"SYSTEM".CATALOGO C
WHERE
	C.CODIGO IN ('comer', 'indus', 'servi', 'ISFL')
ORDER BY
	C.ID_CATALOGO desc;

ELSE
RETURN QUERY
SELECT
	M.ID_CATALOGOVALOR,
	C.CODIGO,
	M.NOMBRE,
	M.U_ESTADO
FROM
	"SYSTEM".CATALOGOVALOR M
	INNER JOIN "SYSTEM".CATALOGO C ON C.ID_CATALOGO = M.ID_CATALOGO
WHERE
	C.CODIGO = CODIGOCAT
ORDER BY
	M.ID_CATALOGOVALOR desc;
end if;
end;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE VIEW "SYSTEM".OBTENER_ROLES AS
 SELECT m.id_rol,
    m.rol, 
    m.descripcion,
    m.u_estado,
    m.fecha_creacion,
    m.usuario_creacion,
    m.fecha_modifica,
    m.usuario_modifica,
    u.usuario,
    um.usuario AS usuariom
   FROM "SYSTEM".roles m
     JOIN "SYSTEM".usuarios u ON u.id_usuario = m.usuario_creacion
     LEFT JOIN "SYSTEM".usuarios um ON um.id_usuario = m.usuario_modifica
  ORDER BY m.id_rol asc;
  
 CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_ROL (
	ROL VARCHAR(255), 
	DESCRIPCION VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".ROLES (
		ROL,
		DESCRIPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		ROL,
		DESCRIPCION,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING	
	ID_ROL;
end;
$$ LANGUAGE PLPGSQL; 
  
  CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_ROL (
	IDROL INTEGER,
	NOMBROL VARCHAR(255),
	DESCRI VARCHAR(2000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".ROLES
SET
	ROL = NOMBROL,
	DESCRIPCION = DESCRI,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_ROL = IDROL
RETURNING
	ID_ROL;

END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_ROL (IDROL INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".ROLES
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_ROL = IDROL
RETURNING
	ID_ROL;
end;
$$ LANGUAGE PLPGSQL;
	
	
	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_MENU AS
SELECT
	m.ID_MENU,
	m.ID_MENUPADRE,
	m.NOMBRE,
	m.ICONO,
	m.ORDEN,
	m.U_ESTADO,
	m.FECHA_CREACION,
	m.USUARIO_CREACION,
	m.FECHA_MODIFICA,
	m.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".MENU M
     JOIN "SYSTEM".usuarios u ON u.id_usuario = m.usuario_creacion
     LEFT JOIN "SYSTEM".usuarios um ON um.id_usuario = m.usuario_modifica
  ORDER BY m.id_menu asc;
  
  
   CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_MENU (
	NOMBRE VARCHAR(255), 
	ICONO VARCHAR(255),
	ORDEN INT,
	ID_MENUPADRE INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".MENU (
		ID_MENUPADRE,
		NOMBRE,
		ICONO,
		ORDEN,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		ID_MENUPADRE,
		NOMBRE,
		ICONO,
		ORDEN,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING	
	ID_MENU;
end;
$$ LANGUAGE PLPGSQL; 

  CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_MENU (
	IDMENU INT,
	NOMBREMENU VARCHAR(255), 
	ICONOMENU VARCHAR(255),
	ORDENMENU INT,
	MENUPADRE INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".MENU
SET
	NOMBRE = NOMBREMENU,
	ID_MENUPADRE=MENUPADRE,
	ICONO=ICONOMENU,
	ORDEN=ORDENMENU,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_MENU = IDMENU
RETURNING
	ID_MENU;

END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_MENU (IDMENU INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".MENU
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_MENU = IDMENU
RETURNING
	ID_MENU;
end;
$$ LANGUAGE PLPGSQL;


	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_ROLMENU AS
SELECT
	m.ROL_MENU_ID,
	m.ID_ROL,
	m.ID_MENU,
	m.U_ESTADO,
	m.FECHA_CREACION,
	m.USUARIO_CREACION,
	m.FECHA_MODIFICA,
	m.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".ROL_MENU M
     JOIN "SYSTEM".usuarios u ON u.id_usuario = m.usuario_creacion
     LEFT JOIN "SYSTEM".usuarios um ON um.id_usuario = m.usuario_modifica
  ORDER BY m.ROL_MENU_ID asc;
  
  
  
  
  
  
	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_OPCIONMENU AS
SELECT
	M.ID_OPCION,
	M.ID_MENU,
	M.NOMBRE,
	M.DESCRIPCION,
	M.ICONO,
	M.ORDEN,
	M.NOMBREVISTA,
	M.U_ESTADO,
	M.FECHA_CREACION,
	M.USUARIO_CREACION,
	M.FECHA_MODIFICA,
	men.nombre as menu,
	M.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".OPCION M
	JOIN "SYSTEM".MENU MEN ON MEN.ID_MENU = M.ID_MENU
	JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = M.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = M.USUARIO_MODIFICA
	  ORDER BY m.id_opcion asc;
	  
CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_OPCION (IDOPCION INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".OPCION
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_OPCION = IDOPCION
RETURNING
	ID_OPCION;
end;
$$ LANGUAGE PLPGSQL;

   CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_OPCION (
	NOMBRE VARCHAR(255), 
	NOMBREVISTA VARCHAR(255), 
	DESCRIPCION VARCHAR(255),
	IDMENU INT,
	ICONO VARCHAR(255),
	ORDEN INT,	
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
"SYSTEM".OPCION (
		ID_MENU,
		NOMBRE,
		DESCRIPCION,
		ICONO,
		ORDEN,
		NOMBREVISTA,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(		
		IDMENU,
		NOMBRE,
		DESCRIPCION,
		ICONO,
		ORDEN,
		NOMBREVISTA,
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING	
	ID_OPCION;
end;
$$ LANGUAGE PLPGSQL; 

  CREATE
OR REPLACE FUNCTION "SYSTEM".actualizar_opcion (
	IDOPCION INT,
	NOMBREOPCION VARCHAR(255), 
	NOMBREVISTAOPCION VARCHAR(255), 
	DESCRIPCIONOPCION VARCHAR(255),
	IDMENU INT,
	ICONOOP VARCHAR(255),
	ORDENOP INT,	
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
BEGIN RETURN QUERY
UPDATE "SYSTEM".OPCION
SET	
	ID_MENU = IDMENU,
	NOMBRE = NOMBREOPCION,
	DESCRIPCION = DESCRIPCIONOPCION,
	ICONO = ICONOOP,
	ORDEN = ORDENOP,
	NOMBREVISTA = NOMBREVISTAOPCION,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_OPCION = IDOPCION
RETURNING
	ID_OPCION;

END;
$$ LANGUAGE PLPGSQL;


CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENERMENU (IN IDROL INT) RETURNS SETOF "SYSTEM".MENU AS $$
begin
RETURN QUERY
SELECT
	M.*
FROM
	"SYSTEM".MENU M
	INNER JOIN "SYSTEM".ROL_MENU RM ON RM.ID_MENU = M.ID_MENU
WHERE
	RM.ID_ROL = IDROL and m.u_estado=1
ORDER BY
	M.ID_MENUPADRE,
	M.ORDEN ASC;

ENd;
$$ LANGUAGE 'plpgsql';

CREATE
OR REPLACE FUNCTION "SYSTEM".OBTENEROPCIONES (IN IDROL INT) RETURNS SETOF "SYSTEM".OPCION AS $$
begin
RETURN QUERY
SELECT
	O.*
FROM
	"SYSTEM".OPCION O
	INNER JOIN "SYSTEM".ROL_OPCION RO ON RO.ID_OPCION = O.ID_OPCION
WHERE
	RO.ID_ROL = IDROL and o.u_estado=1
ORDER BY
	ORDEN ASC;
end;
$$ LANGUAGE 'plpgsql';


	CREATE OR REPLACE VIEW "SYSTEM".OBTENER_ROLOPCION AS
SELECT
	RO.ROLOPCION_ID,
	RO.ID_ROL,
	RO.ID_OPCION,
	R.ROL,
	O.NOMBRE as opcion,
	RO.U_ESTADO,
	RO.FECHA_CREACION,
	RO.USUARIO_CREACION,
	RO.FECHA_MODIFICA,
	RO.USUARIO_MODIFICA,
	U.USUARIO,
	UM.USUARIO AS USUARIOM
	FROM
	"SYSTEM".ROL_OPCION RO
	JOIN "SYSTEM".ROLES R ON R.ID_ROL = RO.ID_ROL
	JOIN "SYSTEM".OPCION O ON O.ID_OPCION = RO.ID_OPCION
	JOIN "SYSTEM".USUARIOS U ON U.ID_USUARIO = RO.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = RO.USUARIO_MODIFICA
ORDER BY
	RO.ROLOPCION_ID ASC;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_ROLOPCION (
	IDOPCION INT,
	IDROL INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".ROL_OPCION (
		ID_ROL,
		ID_OPCION,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		IDROL,
		IDOPCION, 
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ROLOPCION_ID;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADO_ROLOPCION (IDROLOPCION INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".rol_opcion
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ROLOPCION_ID = IDROLOPCION
RETURNING
	IDROLOPCION;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ELIMINAR_ROLOPCION (IDROLOPCION INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
DELETE FROM "SYSTEM".rol_opcion
WHERE
	ROLOPCION_ID = IDROLOPCION
RETURNING
	IDROLOPCION;
end;
$$ LANGUAGE PLPGSQL;
  
CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_ROLMENU (
	IDMENU INT,
	IDROL INT,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".ROL_MENU (
		ID_ROL,
		ID_MENU,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		IDROL,
		IDMENU, 
		1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	)
RETURNING
	ROL_MENU_ID;
end;
$$ LANGUAGE PLPGSQL;
  
  
  
 
CREATE OR REPLACE VIEW "SYSTEM".OBTENER_USUARIOS AS
SELECT
	U.ID_USUARIO,
	U.U_NOMBRE_COMPLETO,
	U.U_APELLIDO_COMPLETO,
	U.U_EMAIL,
	U.USUARIO,
	U.U_CLAVE,
	U.ID_ROL,
	R.rol,
	U.U_ESTADO,
	U.RESET_CLAVE,
	U.U_BLOQUEADO,
	U.FECHA_VENCIMIENTO,
	U.CANTIDAD_INTENTO,
	U.FECHA_CREACION,
	U.USUARIO_CREACION,
	U.FECHA_MODIFICA,
	U.USUARIO_MODIFICA,
	UM.USUARIO AS USUARIOM
FROM
	"SYSTEM".USUARIOS U
	INNER JOIN "SYSTEM".roles r on r.id_rol=U.id_rol
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = U.USUARIO_MODIFICA
ORDER BY
	U.ID_USUARIO ASC;
  
  
  
 CREATE
OR REPLACE FUNCTION "SYSTEM".BLOQUEAR_USUARIO (IDUSER INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".usuarios
SET
	U_BLOQUEADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSER
RETURNING
	ID_USUARIO;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".cambiarestado_usuario (IDUSER INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".usuarios
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_USUARIO = IDUSER
RETURNING
	ID_USUARIO;
end;
$$ LANGUAGE PLPGSQL;


CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_USUARIO (
	NOMBRE VARCHAR(200),
	APELLIDO VARCHAR(200),
	USUARIO VARCHAR(15),
	EMAIL VARCHAR(75),
	CLAVE VARCHAR(75),
	IDROL INTEGER,
	FECHAVENCIMIENTO DATE,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
 RETURN QUERY
INSERT INTO
	"SYSTEM".USUARIOS (
		U_NOMBRE_COMPLETO,
		U_APELLIDO_COMPLETO,
		U_EMAIL,
		USUARIO,
		U_CLAVE,
		ID_ROL,
		U_ESTADO,
		RESET_CLAVE,
		U_BLOQUEADO,
		FECHA_VENCIMIENTO,
		CANTIDAD_INTENTO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
VALUES
	(
		 NOMBRE,
		 APELLIDO,
		 EMAIL,
		 USUARIO,
		 CLAVE,
		 IDROL,
		 1,
		 1,
		 0,
		 FECHAVENCIMIENTO,
		 0,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
	) 

RETURNING
	ID_USUARIO; 
end;
$$ LANGUAGE PLPGSQL;


CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_USUARIO(
	IDUSURIO INTEGER,
	NOMBRE VARCHAR(200),
	APELLIDO VARCHAR(200),
	u_USUARIO VARCHAR(15),
	EMAIL VARCHAR(75),
	CLAVE VARCHAR(75),
	IDROL INTEGER,
	FECHAVENCIMIENTO DATE,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".USUARIOS
SET
	U_NOMBRE_COMPLETO = NOMBRE,
	U_APELLIDO_COMPLETO = APELLIDO,
	U_EMAIL = EMAIL,
	USUARIO = u_USUARIO,
	ID_ROL = IDROL,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	id_usuario = IDUSURIO
RETURNING
	id_usuario;
end;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE VIEW "SYSTEM".OBTENER_COMPANY AS
SELECT
	U.ID_COMPANY,
	U.NOMBRE,
	U.DIRECCION,
	U.CIUDAD,
	U.ID_VALESTADO,
	U.CODIGOZIP,
	U.NOMBRECOMPLETO,
	U.TELEFONO,
	U.EMAIL,
	U.U_ESTADO,
	U.FECHA_CREACION,
	U.USUARIO_CREACION,
	U.FECHA_MODIFICA,
	U.USUARIO_MODIFICA,
	U."NTE",
	U.CREDITO,
	cve.nombre as Estado,
	UM.USUARIO AS USUARIOM,
	UU.Usuario as Usuario
FROM
	"SYSTEM".company U 
	INNER JOIN "SYSTEM".catalogovalor cve on CVE.id_catalogovalor=U.ID_VALESTADO
	JOIN "SYSTEM".USUARIOS UU ON UU.ID_USUARIO = U.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = U.USUARIO_MODIFICA
ORDER BY
	U.ID_COMPANY ASC;
	
	
CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_COMPANY (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
 RETURN QUERY
INSERT INTO
"SYSTEM".company ( 
		NOMBRE,
		DIRECCION,
		CIUDAD,
		ID_VALESTADO,
		CODIGOZIP,
		NOMBRECOMPLETO,
		TELEFONO,
		EMAIL,
		CREDITO,
		"NTE",
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
	select (data ->> 'nombre')::varchar(255) ,
	(data ->> 'direccion')::varchar(2000) ,
	(data ->> 'ciudad')::varchar(255) , 
	(data ->> 'cmb_estado')::integer ,
	(data ->> 'codigozip')::integer ,
	(data ->> 'nombrecompleto')::varchar(255) ,
	(data ->> 'telefono')::varchar(255) ,
	(data ->> 'email')::varchar(255) , 
	(data ->> 'credito')::DOUBLE PRECISION ,
	(data ->> 'nte')::DOUBLE PRECISION ,
	 	1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)
 
RETURNING
	ID_COMPANY; 
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_COMPANY (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
begin
 RETURN QUERY 
UPDATE "SYSTEM".company   
set
 nombre=foo2.nombre,direccion=foo2.direccion
 ,ciudad=foo2.ciudad,id_valestado=foo2.cmb_estado
 ,codigozip=foo2.codigozip,email=foo2.email,
 nombrecompleto=foo2.nombrecompleto,telefono=foo2.telefono,
 credito=foo2.credito,"NTE"=foo2.nte,
 fecha_modifica=CURRENT_DATE,usuario_modifica=IDUSUARIO
   FROM (
	select 
	(data ->> 'idCompany')::integer as idcompany ,
	(data ->> 'nombre')::varchar(255) as nombre ,
	(data ->> 'ciudad')::varchar(255) as ciudad,
	(data ->> 'direccion')::varchar(2000) as direccion,
	(data ->> 'cmb_estado')::integer as cmb_estado,
	(data ->> 'codigozip')::integer as codigozip,
	(data ->> 'email')::varchar(255) as email,
	(data ->> 'nombrecompleto')::varchar(255) as nombrecompleto,
	(data ->> 'telefono')::varchar(255) as telefono ,
	(data ->> 'credito')::DOUBLE PRECISION as credito ,
	(data ->> 'nte')::DOUBLE PRECISION as nte 
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)) as FOO2
 WHERE company.id_company = foo2.idCompany

RETURNING
	ID_COMPANY; 
end;
$$ LANGUAGE PLPGSQL;



CREATE
OR REPLACE FUNCTION "SYSTEM".cambiarestado_company (IDCOMPANY INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".company
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_COMPANY = IDCOMPANY
RETURNING
	ID_COMPANY;
end;
$$ LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION "SYSTEM".GENERARREFTRABAJO(idtrabajo INT)
RETURNS TEXT AS $$
BEGIN
	RETURN CONCAT('INV-',idtrabajo,'-',TO_CHAR(NOW(),'YYYYMMDDHH'));
END;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_JOB (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
DECLARE	idcliente INT; 
DECLARE	idestadojob INT; 
DECLARE	idtrabajo INT; 
begin 

select id_catalogovalor into idestadojob  from "SYSTEM".catalogovalor where nombre='Booked' and u_estado=1;

INSERT INTO
	"SYSTEM".CLIENTE (
		ID_VALESTADO,
		FULL_NAME,
		ADDRESS,
		CITY,
		CODIGOZIP,
		PHONE,
		PHONE_MOVIL,
		EMAIL,
		COMPANY_NAME,
		CONTACT_INFO,
		CONTACT_PHONE,
		CONTACT_EMAIL,
		VALOR_NTE,
		CUSTOMER_FEE,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
select 
	(data ->> 'cmb_estado')::integer cmb_estado ,
	(data ->> 'fullname')::varchar(500) fullname,
	(data ->> 'direccion')::varchar(2000) direccion,
	(data ->> 'city')::varchar(2000) city, 
	(data ->> 'codigozip')::integer codigozip,
	(data ->> 'phone')::varchar(255) phone,
	(data ->> 'telefono')::varchar(255) telefono , 
	(data ->> 'email')::varchar(255) email ,
	(data ->> 'companyname')::varchar(255) companyname, 	 	
	(data ->> 'contactinfo')::varchar(255) contactinfo,
	(data ->> 'contactphone')::varchar(255) contactphone,	
	(data ->> 'contactmail')::varchar(255) contactmail,
	(data ->> 'nte')::DOUBLE PRECISION nte,
	(data ->> 'fee')::DOUBLE PRECISION fee,
	 	1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)
RETURNING ID_CLIENTE INTO idcliente ; 


INSERT INTO
	"SYSTEM".TRABAJO ( 
		ID_COMPANY,
		ID_CLIENTE,
		ID_ESTADOTRABAJO,
		ID_TECNICO,
		NUM_REFERENCIA,
		U_ESTADO,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
select 
	(data ->> 'idCompany')::integer as idCompany ,
	idcliente,
	idestadojob,
	(data ->> 'cmb_tecnico')::integer as cmb_tecnico ,
	'#REF', 
	 	1,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)
 RETURNING  ID_TRABAJO INTO idtrabajo; 


INSERT INTO
	"SYSTEM".MOVIMIENTOTRABAJO ( 
		ID_TRABAJO,
		ID_ESTADOTRABAJO,
		NOTA,
		FECHA_CREACION,
		USUARIO_CREACION
	)
VALUES (idtrabajo,idestadojob,'job booked',CURRENT_DATE,IDUSUARIO );
 

 RETURN QUERY
 UPDATE "SYSTEM".TRABAJO set NUM_REFERENCIA="SYSTEM".GENERARREFTRABAJO(idtrabajo)
 where ID_TRABAJO=idtrabajo
 RETURNING  ID_TRABAJO;

end;
$$ LANGUAGE PLPGSQL;

    CREATE OR REPLACE VIEW "SYSTEM".OBTENER_JOBS AS
SELECT	
	T.ID_TRABAJO,
	T.ID_COMPANY,	
	T.ID_CLIENTE,
	T.ID_TECNICO,
	COM.NOMBRE,
	T.NUM_REFERENCIA,
	cve.nombre as Estadojob,
	cvec.nombre as Estadocompany,
	T.U_ESTADO,
	T.ID_ESTADOTRABAJO,
	T.FECHA_CREACION,
	T.USUARIO_CREACION,
	T.FECHA_MODIFICA,
	T.USUARIO_MODIFICA,	
	C.ID_VALESTADO as estadocliente,
	C.FULL_NAME,
	C.ADDRESS,
	C.CITY,
	C.CODIGOZIP,
	C.PHONE,
	C.PHONE_MOVIL,
	C.EMAIL,
	C.COMPANY_NAME,
	C.CONTACT_INFO,
	C.CONTACT_PHONE,
	C.CONTACT_EMAIL,
	C.VALOR_NTE,
	C.CUSTOMER_FEE,
	UM.USUARIO AS USUARIOM,
	UU.Usuario as Usuario,
	    com.email AS correocompany
FROM
	"SYSTEM".TRABAJO T
	INNER JOIN "SYSTEM".catalogovalor cve on CVE.id_catalogovalor=T.id_estadotrabajo	
	INNER JOIN "SYSTEM".CLIENTE C ON C.ID_CLIENTE = T.ID_CLIENTE
	INNER JOIN "SYSTEM".COMPANY COM ON COM.ID_COMPANY = T.ID_COMPANY
	INNER JOIN "SYSTEM".catalogovalor cvec on CVEc.id_catalogovalor=com.id_valestado
	JOIN "SYSTEM".USUARIOS UU ON UU.ID_USUARIO = T.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = T.USUARIO_MODIFICA;
	
	
	CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_JOB (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$
DECLARE	idcliente INT; 
begin
select id_cliente into idcliente	  from "SYSTEM".trabajo where id_trabajo in (
select 
	(data ->> 'idjob')::integer as idjob 
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data));

UPDATE "SYSTEM".CLIENTE
SET 
	ID_VALESTADO = foo.cmb_estado,
	FULL_NAME = foo.fullname,
	ADDRESS = foo.direccion,
	CITY = foo.city,
	CODIGOZIP = foo.codigozip,
	PHONE = foo.phone,
	PHONE_MOVIL = foo.telefono,
	EMAIL = foo.email,
	COMPANY_NAME = foo.companyname,
	CONTACT_INFO = foo.contactinfo,
	CONTACT_PHONE = foo.contactphone,
	CONTACT_EMAIL = foo.contactmail,
	VALOR_NTE = foo.nte,
	CUSTOMER_FEE =foo.fee,
 fecha_modifica=CURRENT_DATE,usuario_modifica=IDUSUARIO
   FROM (
	select 
	(data ->> 'idjob')::integer as idjob ,
	(data ->> 'idCompany')::integer as idCompany ,
	(data ->> 'fullname')::varchar(500) fullname,
	(data ->> 'city')::varchar(2000) city, 
	(data ->> 'codigozip')::integer codigozip,
	(data ->> 'direccion')::varchar(2000) direccion,
	(data ->> 'cmb_estado')::integer cmb_estado ,
	(data ->> 'phone')::varchar(255) phone,
	(data ->> 'telefono')::varchar(255) telefono , 
	(data ->> 'email')::varchar(255) email ,
	(data ->> 'companyname')::varchar(255) companyname, 	 	
	(data ->> 'contactinfo')::varchar(255) contactinfo,
	(data ->> 'contactphone')::varchar(255) contactphone,
	(data ->> 'contactmail')::varchar(255) contactmail,
	(data ->> 'nte')::DOUBLE PRECISION nte,
	(data ->> 'fee')::DOUBLE PRECISION fee
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data) ) as FOO
 WHERE CLIENTE.ID_CLIENTE = idcliente;

 RETURN QUERY  
UPDATE "SYSTEM".trabajo   
set
 id_company=foo.idCompany,id_tecnico=cmb_tecnico,
 fecha_modifica=CURRENT_DATE,usuario_modifica=IDUSUARIO
   FROM (
	select 
	(data ->> 'idjob')::integer as idjob ,
	(data ->> 'idCompany')::integer as idCompany,
	(data ->> 'cmb_tecnico')::integer as cmb_tecnico
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)) as FOO
 WHERE trabajo.id_trabajo = foo.idjob

RETURNING
	id_trabajo; 
end;
$$ LANGUAGE PLPGSQL;




CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_SERVICIO (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
begin 
RETURN QUERY 
 INSERT INTO
	"SYSTEM".SERVICIO ( 
		ID_TRABAJO,
		ID_VALSERVICE,
		ID_VALAPPLIANCE,
		ID_VALBRAND,
		ID_VALSYMPTOM,
		MODEL,
		PROBLEMDETAIL,
		SERVICEFEE,
		COVERED,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
select 
	(data ->> 'id_trabajo')::integer id_trabajo ,
	(data ->> 'id_valservice')::integer id_valservice ,
	(data ->> 'id_valappliance')::integer id_valappliance ,
	(data ->> 'id_valbrand')::integer id_valbrand ,
	(data ->> 'id_valsymptom')::integer id_valsymptom ,
	(data ->> 'model')::varchar(250) model,
	(data ->> 'problemdetail')::varchar(2500) problemdetail, 
	(data ->> 'servicefee')::DOUBLE PRECISION servicefee,
	(data ->> 'covered')::DOUBLE PRECISION covered,
		CURRENT_DATE,
		IDUSUARIO,
		NULL,
		NULL
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)
RETURNING  ID_SERVICIO;

end;
$$ LANGUAGE PLPGSQL;

		CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_SERVICE (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
begin  
 RETURN QUERY  
UPDATE "SYSTEM".servicio   
set 
	ID_TRABAJO = foo.idtrabajo,
	ID_VALSERVICE = foo.idvalservice,
	ID_VALAPPLIANCE = foo.idvalappliance,
	ID_VALBRAND = foo.idvalbrand,
	ID_VALSYMPTOM = foo.idvalsymptom,
	MODEL = foo.datamodel,
	PROBLEMDETAIL = foo.dataproblemdetail,
	SERVICEFEE = foo.dataservicefee,
	COVERED = foo.datacovered, 	
 fecha_modifica=CURRENT_DATE,usuario_modifica=IDUSUARIO
   FROM (
	select 
	(data ->> 'id_servicio')::integer idservicio ,
	(data ->> 'id_trabajo')::integer idtrabajo ,
	(data ->> 'id_valservice')::integer idvalservice ,
	(data ->> 'id_valappliance')::integer idvalappliance ,
	(data ->> 'id_valbrand')::integer idvalbrand ,
	(data ->> 'id_valsymptom')::integer idvalsymptom ,
	(data ->> 'model')::varchar(250) datamodel,
	(data ->> 'problemdetail')::varchar(2500) dataproblemdetail, 
	(data ->> 'servicefee')::DOUBLE PRECISION dataservicefee,
	(data ->> 'covered')::DOUBLE PRECISION datacovered
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)) as FOO
 WHERE servicio.id_servicio = foo.idservicio

RETURNING
	id_servicio; 
end;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE VIEW "SYSTEM".OBTENER_SERVICE AS
SELECT
	U.ID_SERVICIO,
	U.ID_TRABAJO,
	U.ID_VALSERVICE,
	U.ID_VALAPPLIANCE,
	U.ID_VALBRAND,
	U.ID_VALSYMPTOM,
	U.MODEL,
	U.PROBLEMDETAIL,
	U.SERVICEFEE,
	U.COVERED,
	U.FECHA_CREACION,
	U.USUARIO_CREACION,
	U.FECHA_MODIFICA,
	U.USUARIO_MODIFICA,
	cve.nombre as tiposervicio,
	cva.nombre as appliance,
	cvb.nombre as brand,
	cvs.nombre as symptom,
	UM.USUARIO AS USUARIOM,
	UU.Usuario as Usuario
FROM
	"SYSTEM".servicio U 
	INNER JOIN "SYSTEM".catalogovalor cve on CVE.id_catalogovalor=U.ID_VALSERVICE
	INNER JOIN "SYSTEM".catalogovalor cva on CVa.id_catalogovalor=U.ID_VALAPPLIANCE
	INNER JOIN "SYSTEM".catalogovalor cvb on CVb.id_catalogovalor=U.ID_VALBRAND
	INNER JOIN "SYSTEM".catalogovalor cvs on CVs.id_catalogovalor=U.ID_VALSYMPTOM
	JOIN "SYSTEM".USUARIOS UU ON UU.ID_USUARIO = U.USUARIO_CREACION
	LEFT JOIN "SYSTEM".USUARIOS UM ON UM.ID_USUARIO = U.USUARIO_MODIFICA
ORDER BY
	U.ID_SERVICIO ASC;
	
	
	CREATE
OR REPLACE FUNCTION "SYSTEM".cambiarestado_service (IDservicio INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
DELETE FROM "SYSTEM".diagnostico
WHERE
	id_servicio = IDservicio;
	
	DELETE FROM "SYSTEM".parte
WHERE
	id_servicio = IDservicio;

RETURN QUERY
DELETE FROM "SYSTEM".servicio
WHERE
	id_servicio = IDservicio
RETURNING
	id_servicio; 
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_CITA (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
begin 
RETURN QUERY 
INSERT INTO
	"SYSTEM".CITA (
		ID_TRABAJO,
		FECHA,
		HORAINI,
		MININI,
		TIEMPONI,
		HORAFIN,
		MINFIN,
		TIEMPOFIN,
		NOTA,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
SELECT
	(DATA ->> 'id_trabajo')::INTEGER ID_TRABAJO,
	(DATA ->> 'fechacita')::DATE FECHACITA,
	(DATA ->> 'horaini')::VARCHAR(250) HORAINI,
	(DATA ->> 'minini')::VARCHAR(250) MININI,
	(DATA ->> 'tiempoini')::VARCHAR(250) TIEMPOINI,
	(DATA ->> 'horafin')::VARCHAR(250) HORAFIN,
	(DATA ->> 'minfin')::VARCHAR(250) MINFIN,
	(DATA ->> 'tiempofin')::VARCHAR(250) TIEMPOFIN,
	(DATA ->> 'problemdetail')::VARCHAR(5000) PROBLEMDETAIL,
	CURRENT_DATE,
	IDUSUARIO,
	NULL,
	NULL
FROM
	JSONB_ARRAY_ELEMENTS(DATOSJSON::JSONB) AS ITEM (DATA)
RETURNING
	ID_CITA;
end;
$$ LANGUAGE PLPGSQL;


		CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_CITA (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
begin  
 RETURN QUERY  
UPDATE "SYSTEM".CITA   
set   
	FECHA = foo.fechacita,
	HORAINI = foo.horaini,
	MININI = foo.minini,
	TIEMPONI = foo.tiempoini,
	HORAFIN = foo.horafin,
	MINFIN = foo.minfin,
	TIEMPOFIN = foo.tiempofin,
	NOTA = foo.problemdetail, 
 fecha_modifica=CURRENT_DATE,usuario_modifica=IDUSUARIO
   FROM (
	select 
	(data ->> 'id_cita')::integer idcita ,
	(data ->> 'id_trabajo')::integer id_trabajo ,
	(data ->> 'fechacita')::date fechacita ,
	(data ->> 'horaini')::varchar(250) horaini ,
	(data ->> 'minini')::varchar(250) minini ,
	(data ->> 'tiempoini')::varchar(250) tiempoini,
	 (data ->> 'horafin')::varchar(250) horafin ,
	(data ->> 'minfin')::varchar(250)minfin ,
	(data ->> 'tiempofin')::varchar(250) tiempofin,
	(data ->> 'problemdetail')::varchar(5000) problemdetail
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)) as FOO
 WHERE CITA.id_cita = foo.idcita

RETURNING
	id_cita; 
end;
$$ LANGUAGE PLPGSQL;


CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_PAGO (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
begin 
RETURN QUERY 
INSERT INTO
	"SYSTEM".PAYMENT (
		ID_TRABAJO, 
		ID_VALPAYMENT,
		NOTA,
		FECHA_CREACION,
		USUARIO_CREACION,
		FECHA_MODIFICA,
		USUARIO_MODIFICA
	)
SELECT
	(DATA ->> 'id_trabajo')::INTEGER ID_TRABAJO,
	(DATA ->> 'idvalpago')::INTEGER idvalpago, 
	(DATA ->> 'nota')::VARCHAR(3500) nota,
	CURRENT_DATE,
	IDUSUARIO,
	NULL,
	NULL
FROM
	JSONB_ARRAY_ELEMENTS(DATOSJSON::JSONB) AS ITEM (DATA)
RETURNING
	ID_PAYMENT;
end;
$$ LANGUAGE PLPGSQL;

		CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZAR_PAGO (
	DATOSJSON JSONB,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
begin  
 RETURN QUERY  
UPDATE "SYSTEM".PAYMENT   
set    
	ID_VALPAYMENT = foo.idvalpago,
	NOTA = foo.notapago, 
 fecha_modifica=CURRENT_DATE,usuario_modifica=IDUSUARIO
   FROM (
	select 
	(data ->> 'id_pago')::integer idpago ,
		(DATA ->> 'idvalpago')::INTEGER idvalpago, 
	(DATA ->> 'nota')::VARCHAR(3500) notapago
FROM jsonb_array_elements(DATOSJSON::jsonb) AS item(data)) as FOO
 WHERE PAYMENT.id_payment = foo.idpago

RETURNING
	id_payment; 
end;
$$ LANGUAGE PLPGSQL;



CREATE
OR REPLACE FUNCTION "SYSTEM".cambiarestado_job (IDjob INTEGER, ESTADO INT, IDUSUARIO INT) RETURNS SETOF INT AS $$
begin
RETURN QUERY
UPDATE "SYSTEM".trabajo
SET
	U_ESTADO = ESTADO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_TRABAJO = IDjob
RETURNING
	ID_TRABAJO;
end;
$$ LANGUAGE PLPGSQL;

 


CREATE
OR REPLACE FUNCTION "SYSTEM".CAMBIARESTADOVALOR_JOB (
	IDTRABAJO INT,
	ESTADO VARCHAR(100),
	COMENTARIO VARCHAR(3000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$ 
DECLARE	idestadojob INT;  
begin 

select id_catalogovalor into idestadojob  from "SYSTEM".catalogovalor where nombre=ESTADO and u_estado=1;

UPDATE "SYSTEM".TRABAJO
SET
	ID_ESTADOTRABAJO = IDESTADOJOB,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_TRABAJO = IDTRABAJO;

RETURN QUERY
INSERT INTO
	"SYSTEM".MOVIMIENTOTRABAJO ( 
		ID_TRABAJO,
		ID_ESTADOTRABAJO,
		NOTA,
		FECHA_CREACION,
		USUARIO_CREACION
	)
VALUES (IDTRABAJO,IDESTADOJOB,COMENTARIO,CURRENT_DATE,IDUSUARIO )
RETURNING
	id_movimiento;

end;
$$ LANGUAGE PLPGSQL;



CREATE
OR REPLACE FUNCTION "SYSTEM".GUARDARMOVIMIENTOJOB (
	IDTRABAJO INT,
	IDJOBSTATE INT,
	COMENTARIO VARCHAR(3000),
	IDUSUARIO INT
) RETURNS SETOF INT AS $$   
begin 
 

UPDATE "SYSTEM".TRABAJO
SET
	ID_ESTADOTRABAJO = IDJOBSTATE,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE
	ID_TRABAJO = IDTRABAJO;

RETURN QUERY
INSERT INTO
	"SYSTEM".MOVIMIENTOTRABAJO ( 
		ID_TRABAJO,
		ID_ESTADOTRABAJO,
		NOTA,
		FECHA_CREACION,
		USUARIO_CREACION
	)
VALUES (IDTRABAJO,IDJOBSTATE,COMENTARIO,CURRENT_DATE,IDUSUARIO )
RETURNING
	id_movimiento;

end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".GUARDARDIAGNOSTICO (
	IDSERVICIO INT,
	SERIAL VARCHAR(250),
	DESCRIPCION VARCHAR(2500),
	COSTO DOUBLE PRECISION,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$   
begin  

RETURN QUERY
INSERT INTO
	"SYSTEM".DIAGNOSTICO (
		ID_SERVICIO,
		SERIAL,
		NOTA,
		LABORFEE,
		FECHA_CREACION,
		USUARIO_CREACION
	)
VALUES (IDSERVICIO,SERIAL,DESCRIPCION,COSTO,CURRENT_DATE,IDUSUARIO )
RETURNING
	ID_DIAGNOSTICO;

end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZARDIAGNOSTICO (
	IDDIAGNOSTICO INT,
	IDSERVICIO INT,
	SERIALVAL VARCHAR(250),
	DESCRIPCION VARCHAR(2500),
	COSTO DOUBLE PRECISION,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$   
begin  

RETURN QUERY
UPDATE "SYSTEM".DIAGNOSTICO
SET
	ID_SERVICIO = IDSERVICIO,
	SERIAL = SERIALVAL,
	NOTA = DESCRIPCION,
	LABORFEE = COSTO,
	FECHA_MODIFICA = CURRENT_DATE,
	USUARIO_MODIFICA = IDUSUARIO
WHERE ID_DIAGNOSTICO=IDDIAGNOSTICO
RETURNING
	ID_DIAGNOSTICO;

end;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE VIEW "SYSTEM".OBTENERPARTES AS
SELECT
	p.*,
	u.usuario,
	c.nombre
FROM
	"SYSTEM".PARTE p
     JOIN "SYSTEM".usuarios u ON u.id_usuario = p.usuario_creacion
     inner join "SYSTEM".catalogovalor c on c.id_catalogovalor=p.id_valorparte;


CREATE
OR REPLACE FUNCTION "SYSTEM".GUARDARPARTE (
	IDSERVICIO INT,
	IDVALORPARTE INT,
	CANT INT,
	SERIAL VARCHAR(250), 
	COSTO DOUBLE PRECISION,
	IDUSUARIO INT
) RETURNS SETOF INT AS $$   
begin  

RETURN QUERY
INSERT INTO
	"SYSTEM".PARTE ( 
		ID_SERVICIO,
		ID_VALORPARTE,
		CANTIDAD,
		SERIAL,
		COSTO,
		FECHA_CREACION,
		USUARIO_CREACION
	)
VALUES (IDSERVICIO,IDVALORPARTE,CANT,SERIAL,COSTO,CURRENT_DATE,IDUSUARIO )
RETURNING
	ID_PARTE;

end;
$$ LANGUAGE PLPGSQL;

	CREATE
OR REPLACE FUNCTION "SYSTEM".ELIMINARPARTE (IDPARTE INTEGER) RETURNS SETOF INT AS $$
begin
RETURN QUERY
DELETE FROM "SYSTEM".PARTE
WHERE
	id_parte = idparte
RETURNING
	id_parte;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE FUNCTION "SYSTEM".ACTUALIZARPARTE (
	IDPARTE INT,
	IDSERVICIO INT,
	IDVALORPARTE INT,
	CANT INT,
	SERIALVAL VARCHAR(250), 
	COSTOVAL DOUBLE PRECISION
) RETURNS SETOF INT AS $$   
begin  

RETURN QUERY
UPDATE "SYSTEM".PARTE
SET 
	ID_SERVICIO = IDSERVICIO,
	ID_VALORPARTE = IDVALORPARTE,
	CANTIDAD = CANT,
	SERIAL = SERIALVAL,
	COSTO = COSTOVAL
WHERE ID_PARTE=IDPARTE
RETURNING
	ID_PARTE;

end;
$$ LANGUAGE PLPGSQL;


--para calcular la suma total de todo el TRABAJO
SELECT SUM(
	S.SERVICEFEE+
	D.LABORFEE+
	(select sum((p.cantidad * p.costo))  from "SYSTEM".servicio s 
inner join "SYSTEM".parte p on p.id_servicio=s.id_servicio
where s.id_trabajo=T.ID_TRABAJO)) totaltrabajo
FROM
	"SYSTEM".TRABAJO T
	INNER JOIN "SYSTEM".SERVICIO S ON S.ID_TRABAJO = T.ID_TRABAJO
	INNER JOIN "SYSTEM".DIAGNOSTICO D ON D.ID_SERVICIO = S.ID_SERVICIO
WHERE
	T.ID_TRABAJO = 1;
	
CREATE OR REPLACE VIEW "SYSTEM".dashboardjobs AS
select 'Booked' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Booked' 
union all
select 'Accepted' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Accepted' 
union all
select 'Pending' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Pending' 
union all
select 'Diagnosed' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Diagnosed' 
union all
select 'complete' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='complete' 
union all
select 'Cancelled' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Cancelled' 

CREATE OR REPLACE FUNCTION "SYSTEM".verdashboard(idusario INT)
RETURNS TABLE(estadojob TEXT, cantidad bigint ) AS $$
BEGIN
    RETURN QUERY 
    select 'Booked' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Booked' and t.id_tecnico=idusario 
union all
select 'Accepted' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Accepted' and t.id_tecnico=idusario 
union all
select 'Pending' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Pending' and t.id_tecnico=idusario 
union all
select 'Diagnosed' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Diagnosed' and t.id_tecnico=idusario 
union all
select 'complete' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='complete' and t.id_tecnico=idusario 
union all
select 'Cancelled' as estadojob ,count(t.id_trabajo) as cantidad from "SYSTEM".trabajo t
inner join "SYSTEM".catalogovalor cv on cv.id_catalogovalor=t.id_estadotrabajo
where t.u_Estado=1 and cv.nombre='Cancelled' and t.id_tecnico=idusario; 
END;
$$ LANGUAGE plpgsql;

   CREATE
OR REPLACE FUNCTION "SYSTEM".INSERTAR_IMAGEN ( 	
	trabajo_id INT,
	nombre VARCHAR(255),
	ruta TEXT
) RETURNS SETOF INT AS $$
begin
RETURN QUERY
INSERT INTO
	"SYSTEM".JOBIMAGENES (TRABAJO_ID, NOMBRE, RUTA)
VALUES (trabajo_id,nombre,ruta)
RETURNING
	ID_IMAGEN;
end;
$$ LANGUAGE PLPGSQL;

para buscar iconos
https://www.flaticon.com/search?word=Cancelled 
